{"version":3,"sources":["webpack:///./src/app/pages/reset-password/reset-password.module.ts","webpack:///./src/app/pages/reset-password/reset-password.page.html","webpack:///./src/app/pages/reset-password/reset-password.page.scss","webpack:///./src/app/pages/reset-password/reset-password.page.ts"],"names":[],"mappings":"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","file":"pages-reset-password-reset-password-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ResetPasswordPage } from './reset-password.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ResetPasswordPage]\n})\nexport class ResetPasswordPageModule {}\n","module.exports = \"<ion-header>\\n   <ion-toolbar>\\n      <ion-buttons slot=\\\"start\\\">\\n         <ion-menu-button></ion-menu-button>\\n      </ion-buttons>\\n      <ion-buttons slot=\\\"end\\\">\\n         <ion-back-button defaultHref=\\\"dashboard\\\"></ion-back-button>\\n      </ion-buttons>\\n      <ion-title>\\n         Reset Password\\n      </ion-title>\\n   </ion-toolbar>\\n</ion-header>\\n<ion-content padding>\\n   <form [formGroup]=\\\"reset_pass\\\" (submit)=\\\"reset()\\\">\\n   <ion-row>\\n      <ion-col>\\n         <div class=\\\"ion-text-start\\\">\\n         <ion-item>\\n            <ion-label style=\\\"color: #ed502d;\\\" position=\\\"floating\\\">Current Password</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"cuPass\\\"></ion-input>\\n         </ion-item>\\n         <div *ngIf=\\\"submitted && f.cuPass.errors\\\" class=\\\"invalid-feedback\\\" style=\\\"padding: 10px; left;\\\">\\n            <span *ngIf=\\\"f.cuPass.errors.required\\\" style=\\\" text-align: left;color: red;\\\">This field is required.\\n            </span> \\n\\n         </div>\\n        <div  class=\\\"ion-text-left\\\" style=\\\"text-align: left;color: red;padding: 10px;\\\" *ngIf=\\\"isError== true && errorsArr.password\\\">{{errorsArr.password}}</div>  \\n      </div>\\n      </ion-col>\\n   </ion-row>\\n   <ion-row>\\n      <ion-col>\\n         <div class=\\\"ion-text-start\\\">\\n         <ion-item>\\n            <ion-label style=\\\"color: #ed502d;\\\" position=\\\"floating\\\">New Password</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"pwd\\\"></ion-input>\\n         </ion-item>\\n         <div *ngIf=\\\"submitted && f.pwd.errors\\\"  style=\\\"padding: 10px; left;\\\">\\n            <span *ngIf=\\\"f.pwd.errors.required\\\" style=\\\" text-align: left;color: red;\\\">This field is required.\\n            </span> \\n           \\n             <span *ngIf=\\\"f.pwd.errors.minlength\\\" style=\\\" text-align: left;color: red;\\\">Minimum length for password field is 6 .\\n             </span> \\n         </div>\\n      </div>\\n      </ion-col>\\n   </ion-row>\\n   <ion-row>\\n      <ion-col>\\n         <div class=\\\"ion-text-start\\\">\\n         <ion-item>\\n            <ion-label style=\\\"color: #ed502d;\\\" position=\\\"floating\\\">Confirm Password</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"confPwd\\\"></ion-input>\\n         </ion-item>\\n         <div *ngIf=\\\"submitted && f.confPwd.errors\\\"  style=\\\"padding: 10px; left;\\\">\\n            <span *ngIf=\\\"f.confPwd.errors.required\\\" style=\\\" text-align: left;color: red;\\\">This field is required.\\n            </span> \\n <span *ngIf=\\\"f.confPwd.errors.minlength\\\" style=\\\" text-align: left;color: red;\\\">Minimum length for password field is 6 .\\n             </span>          </div>\\n          <div *ngIf=\\\"submitted && f.confPwd.errors\\\" class=\\\"invalid-feedback\\\" style=\\\"padding: 10px; left;\\\">\\n             <span *ngIf=\\\"f.confPwd.errors.mustMatch\\\" style=\\\" text-align: left;color: red;\\\">Password confirm field must match with password.\\n             </span> \\n          </div>\\n      </div>\\n      </ion-col>\\n   </ion-row>\\n   <ion-row>\\n      <ion-col>\\n         <div class=\\\"ion-text-start\\\">\\n            <button class=\\\"submit-btn\\\" expand=\\\"block\\\" type=\\\"submit\\\">Update\\n            </button>\\n         </div>\\n      </ion-col>\\n   </ion-row>\\n   </form>\\n</ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0LXBhc3N3b3JkLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport {  FormGroup,  FormBuilder,  Validators,FormControl} from '@angular/forms';\nimport {  Router,  ActivatedRoute,  Params} from '@angular/router';\nimport {  AlertController} from '@ionic/angular';\nimport {  LoadingController} from '@ionic/angular';\nimport {  HttpClient,  HttpHeaders,  HttpClientModule} from '@angular/common/http';\nimport {  environment} from '../../../environments/environment';\nimport { ItemService } from '../../services/item.service';\nimport { MustMatch } from '../../helpers/must-match.validator';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.page.html',\n  styleUrls: ['./reset-password.page.scss'],\n})\nexport class ResetPasswordPage implements OnInit {\n   reset_pass: FormGroup;\n   base_url: string = \"\";\n   submitted:boolean=false;\n   isError : boolean = false;\n   errorsArr:any = []; \n   userId:any;\n  constructor(\n    public formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    public alertController: AlertController,\n    public loadingController: LoadingController,\n    private http: HttpClient,\n    private router:Router,\n    public itemService: ItemService,\n\n  \t) { \n     this.reset_pass = this.formBuilder.group({\n      cuPass: new FormControl('',Validators.required),\n      pwd: new FormControl('',[Validators.required,Validators.minLength(6)]),\n      confPwd: new FormControl('',[Validators.required,Validators.minLength(6)]),\n\n    }, {\n        validator: MustMatch('pwd', 'confPwd')\n     });\n      this.base_url = environment.base_url;\n\n  }\n\n  ngOnInit() {\n      this.userId = sessionStorage.getItem(\"loggedInId\");\n  }\n  get f() {\n    return this.reset_pass.controls;\n  }\n\n  reset(){\n    this.submitted=true;\n      if(this.reset_pass.invalid){\n        return;\n      }\n      else{\n          const input = {  \n            \"password\": this.reset_pass.value.cuPass, \n            \"newPassword\": this.reset_pass.value.pwd,                \n            \"newPassword2\": this.reset_pass.value.confPwd,\n          } \n      \n          console.log(input); \n           this.itemService.changePassword(input).subscribe((response:any)=> { \n               this.presentAlert(response['message']);\n             //  console.log(response);\n\n            },error =>{\n              this.isError=true;\n              console.log(error.error);\n              this.errorsArr=error.error;\n            });\n                  \n      }\n  }\n\n  async presentLoading() {\n    const loading = await this.loadingController.create({\n      duration: 2000,\n      cssClass: 'custom-class custom-loading',\n      spinner:null\n    });\n    await loading.present();\n    const {\n      role,\n      data\n    } = await loading.onDidDismiss();\n  }\n\n   async presentAlert(message) {\n    const alert = await this.alertController.create({\n      header: 'Success Message!',\n      subHeader: \"Done!\",\n      message: message,\n      buttons: [{\n        text: 'Okay',\n        handler: () => {\n          console.log('Confirmed Okay');\n          this.router.navigate(['dashboard']);\n        }\n      }]\n    });\n    alert.present();\n  }\n  \n}\n"],"sourceRoot":""}