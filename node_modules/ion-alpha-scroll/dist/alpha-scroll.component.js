"use strict";
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var Hammer = require("hammerjs");
var core_1 = require("@angular/core");
var ionic_angular_1 = require("ionic-angular");
var order_by_1 = require("./order-by");
var alpha_scroll_service_1 = require("./alpha-scroll.service");
var /** @type {?} */ ALPHABETS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var AlphaScrollComponent = /** @class */ (function () {
    function AlphaScrollComponent(elementRef, orderBy, alphaScrollService, content) {
        this.elementRef = elementRef;
        this.orderBy = orderBy;
        this.alphaScrollService = alphaScrollService;
        this.content = content;
        this.sortedItems = [];
        this.alphabet = [];
        this.letterIndicatorEle = document.createElement('div');
        this.letterIndicatorEle.className = 'ion-alpha-letter-indicatorc';
        var /** @type {?} */ body = document.getElementsByTagName('body')[0];
        body.appendChild(this.letterIndicatorEle);
    }
    /**
     * @return {?}
     */
    AlphaScrollComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.indicatorWidth = _this.letterIndicatorEle.offsetWidth;
            _this.indicatorHeight = _this.letterIndicatorEle.offsetHeight;
            _this.setupHammerHandlers();
        });
    };
    /**
     * @return {?}
     */
    AlphaScrollComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        console.log('ngOnChanges');
        var /** @type {?} */ sortedListData = this.orderBy.transform(this.listData, [this.key]);
        var /** @type {?} */ groupItems = _.groupBy(sortedListData, function (item) {
            var /** @type {?} */ letter = _.get(item, _this.key);
            console.log('letter:' + letter);
            var /** @type {?} */ tmp = _this.alphaScrollService.toPinyin(letter.substr(0, 1));
            if (tmp !== 'undefined') {
                letter = tmp;
            }
            console.log('letter2:' + letter);
            return letter.toUpperCase().charAt(0);
        });
        var /** @type {?} */ iteratedObj = this.iterateAlphabet(groupItems);
        this.sortedItems = iteratedObj.sortedItems;
        this.alphabet = iteratedObj.alphabets;
    };
    /**
     * @return {?}
     */
    AlphaScrollComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.letterIndicatorEle) {
            this.letterIndicatorEle.remove();
        }
    };
    /**
     * @param {?} alpha
     * @return {?}
     */
    AlphaScrollComponent.prototype.setAlphaClass = /**
     * @param {?} alpha
     * @return {?}
     */
    function (alpha) {
        return alpha.isActive ? 'ion-alpha-active' : 'ion-alpha-invalid';
    };
    /**
     * @return {?}
     */
    AlphaScrollComponent.prototype.calculateDimensionsForSidebar = /**
     * @return {?}
     */
    function () {
        return {
            top: this.content.contentTop + 'px',
            height: (this.content.getContentDimensions().contentHeight - 28) + 'px'
        };
    };
    /**
     * @param {?} letter
     * @return {?}
     */
    AlphaScrollComponent.prototype.alphaScrollGoToList = /**
     * @param {?} letter
     * @return {?}
     */
    function (letter) {
        var /** @type {?} */ ele = this.elementRef.nativeElement.querySelector("#scroll-letter-" + letter);
        if (ele) {
            this.content.scrollTo(0, ele.offsetTop);
        }
    };
    /**
     * @return {?}
     */
    AlphaScrollComponent.prototype.setupHammerHandlers = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ sidebarEle = this.elementRef.nativeElement.querySelector('.ion-alpha-sidebar');
        if (!sidebarEle)
            return;
        var /** @type {?} */ mcHammer = new Hammer(sidebarEle, {
            recognizers: [
                [Hammer.Pan, { direction: Hammer.DIRECTION_VERTICAL }],
            ]
        });
        mcHammer.on('panstart', function () {
            _this.letterIndicatorEle.style.top = ((window.innerHeight - _this.indicatorHeight) / 2) + 'px';
            _this.letterIndicatorEle.style.left = ((window.innerWidth - _this.indicatorWidth) / 2) + 'px';
            _this.letterIndicatorEle.style.visibility = 'visible';
        });
        mcHammer.on('panend pancancel', function () {
            _this.letterIndicatorEle.style.visibility = 'hidden';
        });
        mcHammer.on('panup pandown', _.throttle(function (e) {
            var /** @type {?} */ closestEle = document.elementFromPoint(e.center.x, e.center.y);
            if (closestEle && ['LI', 'A'].indexOf(closestEle.tagName) > -1) {
                var /** @type {?} */ letter = closestEle.innerText;
                _this.letterIndicatorEle.innerText = letter;
                var /** @type {?} */ letterDivider = _this.elementRef.nativeElement.querySelector("#scroll-letter-" + letter);
                if (letterDivider) {
                    _this.content.scrollTo(0, letterDivider.offsetTop);
                }
            }
        }, 50));
    };
    /**
     * @param {?} groupItems
     * @return {?}
     */
    AlphaScrollComponent.prototype.iterateAlphabet = /**
     * @param {?} groupItems
     * @return {?}
     */
    function (groupItems) {
        var /** @type {?} */ result = { alphabets: [], sortedItems: [] };
        for (var /** @type {?} */ i = 0; i < ALPHABETS.length; i++) {
            var /** @type {?} */ letter = ALPHABETS.charAt(i);
            var /** @type {?} */ isActive = groupItems[letter] ? true : false;
            result.alphabets.push({ letter: letter, isActive: isActive });
            if (!isActive)
                continue;
            result.sortedItems = result.sortedItems.concat([{
                    isDivider: true,
                    letter: letter
                }].concat(groupItems[letter]));
        }
        var /** @type {?} */ otherItems = [{ isDivider: true, letter: '其它' }];
        for (var /** @type {?} */ letter in groupItems) {
            if (ALPHABETS.indexOf(letter) !== -1)
                continue;
            otherItems = otherItems.concat(groupItems[letter]);
        }
        if (otherItems.length > 1) {
            result.sortedItems = result.sortedItems.concat(otherItems);
        }
        return result;
    };
    AlphaScrollComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ion-alpha-scroll',
                    template: "\n        <ion-list class=\"ion-alpha-list\">\n            <div *ngFor=\"let item of sortedItems\">\n                <ion-item-divider id=\"scroll-letter-{{item.letter}}\" *ngIf=\"item.isDivider\">{{item.letter}}\n                </ion-item-divider>\n                <ng-container *ngIf=\"!item.isDivider\">\n                    <ng-container\n                            *ngTemplateOutlet=\"itemTemplate; context: {'item': item, 'currentPageClass': currentPageClass}\">\n                    </ng-container>\n                </ng-container>\n            </div>\n        </ion-list>\n        <ul class=\"ion-alpha-sidebar\" [ngStyle]=\"calculateDimensionsForSidebar()\">\n            <li *ngFor=\"let alpha of alphabet\" [class]=\"setAlphaClass(alpha)\" tappable\n                (click)=\"alphaScrollGoToList(alpha.letter)\">\n                <a>{{alpha.letter}}</a>\n            </li>\n        </ul>\n    ",
                    styles: ["\n        .ion-alpha-list {\n            padding-right: 20px;\n        }\n\n        .ion-alpha-list .item {\n            border-right: none;\n        }\n\n        .ion-alpha-sidebar {\n            position: fixed;\n            right: 0;\n            display: flex;\n            flex-direction: column;\n            justify-content: space-around;\n            z-index: 50000;\n        }\n\n        .ion-alpha-sidebar li {\n            line-height: 1.1;\n            list-style: none;\n            width: 20px;\n            text-align: center;\n        }\n\n        .ion-alpha-letter-indicator {\n            -webkit-transition: opacity 150ms ease-in-out;\n            transition: opacity 150ms ease-in-out;\n            opacity: 1;\n            background-color: rgba(0, 0, 0, 0.4);\n            position: absolute;\n            width: 100px;\n            height: 100px;\n            color: white;\n            display: flex;\n            visibility: hidden;\n            justify-content: center;\n            align-items: center;\n            font-size: 3em;\n            z-index: 999;\n        }\n\n        .ion-alpha-invalid a {\n            color: #cccccc;\n        }\n\n        .ion-alpha-active a {\n            color: darkkhaki !important;\n        }\n    "]
                },] },
    ];
    /** @nocollapse */
    AlphaScrollComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: order_by_1.OrderBy, },
        { type: alpha_scroll_service_1.AlphaScrollService, },
        { type: ionic_angular_1.Content, decorators: [{ type: core_1.Host },] },
    ]; };
    AlphaScrollComponent.propDecorators = {
        "listData": [{ type: core_1.Input },],
        "key": [{ type: core_1.Input },],
        "itemTemplate": [{ type: core_1.Input },],
        "currentPageClass": [{ type: core_1.Input },],
    };
    return AlphaScrollComponent;
}());
exports.AlphaScrollComponent = AlphaScrollComponent;
function AlphaScrollComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AlphaScrollComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AlphaScrollComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    AlphaScrollComponent.propDecorators;
    /** @type {?} */
    AlphaScrollComponent.prototype.listData;
    /** @type {?} */
    AlphaScrollComponent.prototype.key;
    /** @type {?} */
    AlphaScrollComponent.prototype.itemTemplate;
    /** @type {?} */
    AlphaScrollComponent.prototype.currentPageClass;
    /** @type {?} */
    AlphaScrollComponent.prototype.letterIndicatorEle;
    /** @type {?} */
    AlphaScrollComponent.prototype.indicatorHeight;
    /** @type {?} */
    AlphaScrollComponent.prototype.indicatorWidth;
    /** @type {?} */
    AlphaScrollComponent.prototype.sortedItems;
    /** @type {?} */
    AlphaScrollComponent.prototype.alphabet;
    /** @type {?} */
    AlphaScrollComponent.prototype.elementRef;
    /** @type {?} */
    AlphaScrollComponent.prototype.orderBy;
    /** @type {?} */
    AlphaScrollComponent.prototype.alphaScrollService;
    /** @type {?} */
    AlphaScrollComponent.prototype.content;
}
//# sourceMappingURL=alpha-scroll.component.js.map