"use strict";
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var _ = require("lodash");
var OrderBy = /** @class */ (function () {
    function OrderBy() {
    }
    /**
     * @param {?} input
     * @param {?=} orderConfigs
     * @return {?}
     */
    OrderBy.prototype.transform = /**
     * @param {?} input
     * @param {?=} orderConfigs
     * @return {?}
     */
    function (input, orderConfigs) {
        if (orderConfigs === void 0) { orderConfigs = '+'; }
        if (!Array.isArray(input)) {
            return input;
        }
        if (this.isSingle(orderConfigs)) {
            var /** @type {?} */ orderConfig = !Array.isArray(orderConfigs) ? orderConfigs : orderConfigs[0];
            var /** @type {?} */ config = this.parseProperty(orderConfig);
            // Basic array
            if (config.property === '') {
                return _.orderBy(input, [], config.order);
            }
            return _.orderBy(input, [config.property], [config.order]);
        }
        var /** @type {?} */ configs = this.parseProperties(/** @type {?} */ (orderConfigs));
        return _.orderBy(input, configs.properties, configs.orders);
    };
    /**
     * @param {?} orderConfigs
     * @return {?}
     */
    OrderBy.prototype.isSingle = /**
     * @param {?} orderConfigs
     * @return {?}
     */
    function (orderConfigs) {
        return !Array.isArray(orderConfigs) || (Array.isArray(orderConfigs) && orderConfigs.length === 1);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    OrderBy.prototype.parseProperty = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var /** @type {?} */ orderChar = config.substr(0, 1);
        var /** @type {?} */ isDesc = orderChar === '-';
        var /** @type {?} */ hasOrder = orderChar || orderChar === '+';
        return { order: isDesc ? 'desc' : 'asc', property: hasOrder ? config.substr(1) : config };
    };
    /**
     * @param {?} configs
     * @return {?}
     */
    OrderBy.prototype.parseProperties = /**
     * @param {?} configs
     * @return {?}
     */
    function (configs) {
        var _this = this;
        var /** @type {?} */ result = { orders: [], properties: [] };
        configs.forEach(function (configStr) {
            var /** @type {?} */ config = _this.parseProperty(configStr);
            result.orders.push(config.order);
            result.properties.push(config.property);
        });
        return result;
    };
    OrderBy.decorators = [
        { type: core_1.Pipe, args: [{
                    name: 'orderBy',
                    pure: true
                },] },
        { type: core_1.Injectable },
    ];
    return OrderBy;
}());
exports.OrderBy = OrderBy;
function OrderBy_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    OrderBy.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    OrderBy.ctorParameters;
}
//# sourceMappingURL=order-by.js.map